{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"FluentPython-2.Array of Sequencesipynb","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"zOhG8WNhbagf","colab_type":"text"},"source":["###Guido van Rossum was the developer of python\n","He spent 10 years contributing to ABC language"]},{"cell_type":"markdown","metadata":{"id":"jzcLK9-mbyKQ","colab_type":"text"},"source":["**Container Sequences** - list, tuple, deque\n","- holds item of different types\n","- hold references to object they contain\n","\n","\n","**Flat Sequences** - string, array.array, bytes, bytearray\n","- hold items of a single type\n","- hysically store value of each item within its own memory space.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"BV_pTd4Vcm7Y","colab_type":"text"},"source":["**Mutable sequences** (list, deque, bytearray, array.array)\n","**Immutable sequences** (tuple, str, bytes)\n"]},{"cell_type":"markdown","metadata":{"id":"6lB8ILgBdR5z","colab_type":"text"},"source":["##Listcomps vs Map, refilterduce\n","Listcomps can do everything map and filter functions do, without having to use lambda\n","\n","##Caartesian Products: generating lists from 2 or more iterables"]},{"cell_type":"code","metadata":{"id":"rnppF2lObUy3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"0b500eec-9c13-485d-a2b8-74bff5879a97","executionInfo":{"status":"ok","timestamp":1565607354282,"user_tz":-330,"elapsed":898,"user":{"displayName":"Gajal Agarwala","photoUrl":"https://lh3.googleusercontent.com/-WwRSPCWJDxs/AAAAAAAAAAI/AAAAAAAAIH4/ZAQdULkZ-8U/s64/photo.jpg","userId":"03040327622727871298"}}},"source":["colors = ['black', 'red']\n","sizes = ['S', 'M', 'L']\n","# To get all combinations, we can use listcomp\n","tshirts = [(color, size) for color in colors for size in sizes]\n","print(tshirts)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["[('black', 'S'), ('black', 'M'), ('black', 'L'), ('red', 'S'), ('red', 'M'), ('red', 'L')]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9ccyyU8TeMLF","colab_type":"text"},"source":["##Generator Expressions\n","Listcomps can only build list. **genexp** can be used to fill up any sequence types.\n","- using genexp to create tuples, arrays saves memory since it yields items one by one instead of building a whole list to feed another constructor"]},{"cell_type":"code","metadata":{"id":"2nwGEkc_evDQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"7ecd5f82-06d5-4366-ddd6-df61166b5e0a","executionInfo":{"status":"ok","timestamp":1565607843889,"user_tz":-330,"elapsed":910,"user":{"displayName":"Gajal Agarwala","photoUrl":"https://lh3.googleusercontent.com/-WwRSPCWJDxs/AAAAAAAAAAI/AAAAAAAAIH4/ZAQdULkZ-8U/s64/photo.jpg","userId":"03040327622727871298"}}},"source":["tshirts = ((color, size) for color in colors for size in sizes)\n","print(f'List from genexp: {list(tshirts)}')"],"execution_count":22,"outputs":[{"output_type":"stream","text":["List from genexp: [('black', 'S'), ('black', 'M'), ('black', 'L'), ('red', 'S'), ('red', 'M'), ('red', 'L')]\n"],"name":"stdout"}]}]}